0 - cuenta testlodge	4	/	4	
1 - introducción ( 7 ppipios)	3,5	/	4	la información está completa y correcta, la presentación debería ser más esquemática sin tanto texto, sino resaltando sólo las ideas principales.
2 - tipos pruebas esquema / definicion tipos (1 diapo por cada) / coste prueba por nivel/ coste por fase	0	/	8	me falta esta presentación, podéis volver a subirla? porque solo me aparece la primera
3 - definicion / principios /ventajas 	0	/	6	me falta esta presentación, podéis volver a subirla? porque solo me aparece la primera
4 - plan pruebas	5	/	6	os han faltado rellenar algunos campos, como "approach" e "item pass/fail criteria"
5 - doc requisitos	4	/	4	está correcto, os sobra la funcionalidad de login, que os la puse de ejemplo, no es una funcionalidad a ser probada
6 - unitarias	7	/	18	Las pruebas unitarias os faltan casos y definirlas bien, tenéis que escribir el valor concreto, es decir poner un nombre entre 1 y 20 por ejemplo juan. En los requisitos se especifica que debe ser entre 4 y 20. En no válido, tenéis que poner un test por cada caso posible de valores límites, es decir, teníais que haber escrito un test con un nombre menor a 4 carácteres, otro con nombre igual a 4 y lo mismo para el valor límite máximo.  También os falta la comprobación de que no estén vacios los campos. Con la edad debéis probar también los límites, igual a 18 no sólo mayor a 18. En no válida deberíais poner menor a 18 años, no menor a 0 años, ya que el límite está en 18. En idioma debéis probar casos negativos como un idioma no válido y uno vacío. En asignar equipos debéis comprobar que existe el jugador y el equipo y que los campos no estén vacíos. 
7 - aceptación	5	/	15	Las pruebas de aceptación, al igual que en la anterior debéis especificar casos concretos, que todos los campos estén rellenos de forma correcta, por ejemplo: juan, 18, inglés. Debéis probar al igual que en las unitarias todos los casos posibles, no sólo un caso positivo, sino probar a dejar todos los campos vacíos, o introducir valores erróneos. Las pruebas debéis hacer un test por cada caso, es decir, en añadir jugador, debería haber una prueba que sea si un jugador no está asignado en ningún equipo debe dar error, y otro caso si un jugador está en un equipo que no es el suyo da error. Igualmente estos dos casos no están probando los requisitos, tenéis que probar justo lo que dice el requisito que en este caso indica que el jugador y el equipo deben existir para ser asignados. Se debería probar por ejemplo, que si un jugador no existe e intentamos asignarle un equipo nos devuelve un error. En añadir jugador deberíais probar que no se puede añadir un jugador con los campos vacíos, o con idioma y edad incorrecto etcétera.
8 - regresión	4	/	12	las de regresión son las mismas que las de aceptación, las de aceptación deberian de ser mayor en número y las de regresión debería tener al menos 2 casos los más importantes.
9 - implementación formularios	14	/	15	Los formularios están correctos con las validaciones bien, excepto el de añadir jugador, que no me permite añadir un jugador de edad igual a 18, sólo mayor. Aquí tenéis un ejemplo de porqué se debe probar con valor mayor pero también igual :) 
10 - proyecto java	6	/	6	
11 - ejecución pruebas	7	/	12	las pruebas unitarias no se ejecutan de forma manual, sino las de aceptación. Las habéis ejecutado pero no están completas definidas.
	59,5	/	110	
